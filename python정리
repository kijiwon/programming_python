1. Python 연산자
    •산술 연산자
        +(더하기) -(빼기) *(곱하기) /(나누기) //(몫) %(나머지) **(거듭제곱)
    •비교 연산자 
        ==(같다) !=(같지 않다) >(크다) <(작다) >=(크거나 같다) <=(작거나 같다)
    •논리 연산자
        and(모두 참) or(하나라도 참) not(조건의 부정)
    •비트 연산자
        &(AND) |(OR) ^(XOR) ~(NOT:비트 반전) <<(왼쪽 시프트) >>(오른쪽 시프트)
    •기타 연산자
        in(포함 여부) not in(포함 여부 부정) is(동일 객체 확인) is not(동일하지 않음을 확인)

2. 제어문
    •if문: 조건에 따라 실행할 코드 정의
        if x > 5:
            print("x는 5보다 큼")
        elif x == 5: ;elif -> else if와 동일한 의미
            print("x는 5")
        else:
            print("x는 5보다 작음")
    •삼항 연산자
        x = 10
        result = "크다" if x > 5 else "작다" → 크다
    •match문: 여러 값을 조건으로 비교
        x = 2
        match x:
            case 1:
                print("x는 1")
            case 2:
                print("x는 2")
            case _:
                print("x는 1이나 2가 아님")
        [실행 결과] x는 2

3. 반복문
    •for문: 시퀀스나 범위를 순회
        for i in range(5): → 5전까지 범위
            print(i)
    •while문: 조건이 참인 동안 반복
        while x < 5:
            print(x)
            x += 1

4. 반복 제어문
    •break: 반복문 즉시 종료
    •continue: 현재 반복을 건너뛰고 다음 반복 실행

5. 문자열 처리
    ○ 문자열 기본
        •문자열 생성: 작은 따옴표 또는 큰 따옴표로 생성
        •여러 줄 문자열: 삼중 따옴표(''' 또는 """)를 사용해 작성
        •문자열 인덱싱과 슬라이싱
            -인덱싱: 문자열의 특정 위치 문자에 접근
            -슬라이싱: 부분 문자열 추출
            -예제
                text = "Python"
                text[0] = 'P'
                text[-1] = 'n'
                text[0:3] = 'Pyt'
                text[:4] = 'Pyth' → 0번부터 4번 전까지
                text[4:] = 'on' → 4번부터 끝까지
                text[-6:-3] = 'Pyt' → -6번부터 -3앞까지 ⭐️ 출력 순서는 왼→오 ⭐️ 왼쪽부터 출력할 수 없는 범위일 경우 잘못된 호출 → 빈 문자열 출력(범위를 벗어나도 빈 문자열 출력. 오류 발생 ❌)
                text[:-3] = 'Pyt' → 0번부터 -3번 앞까지(왼쪽부터 출력)
                text[::2] = 'Pto' → [시작:끝:간격] 0번부터 끝까지 2간격으로 출력
                text[::-1] = 'nohtyP' → ❗️ 역순으로 출력
                text[::-2] = 'nhy' → 뒤에서부터 2간격으로 출력
                text[-5:-1:2] = 'yh'
    
    ○ 문자열 메소드
        •문자열 변환
            a.lower(): 소문자로 변환
            a.upper(): 대문자로 변환
            a.capitalize(): 맨 첫 글자만 대문자로 변환
            a.title(): 영단어들의 첫 글자를 모두 대문자로 변환
            a.strip(): 시작과 끝의 공백을 제거
        •문자열 검색
            a.find(b): a에서 b가 처음 나타나는 위치 반환. 없으면 -1
            a.index(b): a에서 b의 위치를 반환. 없으면 오류 발생
            a.starstwith(b): a가 b로 시작하는지 확인
            a.endswith(b): a가 b로 끝나는지 확인
            a.count(b): a에서 b가 몇 번 나타나는지 확인
        •문자열 대체 및 수정
            a.replace(b, c): a에서 b를 c로 변경(대체)
            a.split(b): b를 기준으로 a를 나눔 → 리스트로 반환
            '구분자'.join(리스트): 리스트의 요소 사이에 구분자를 넣어 문자로로 합침. ex) '_'.join(['1', '2', '3']) = 1_2_3
        •문자열 검사
            a.isalnum(): 알파벳 또는 숫자로만 구성되었는지 확인
            a.isalpha(): 알파벳으로만 구성되었는지 확인
            a.isdigit(): 숫자로만 구성되었는지 확인
            a.isspace(): 공백 문자로만 구성되었는지 확인
        •문자열 조작
            len(a): 문자열 길이 반환
            a[::-1]: 문자열을 역순으로 반환
            b in a: 문자열 a에 b가 포함되었는지 확인

⭐️ 6. 자료구조
    ○ 리스트(List): 순서가 있는 변경 가능한(Mutable) 자료구조. 중복 데이터 허용
        list1 = [1, 2, 3, 4]
        •주요 메소드
            a.append(b): 리스트 끝에 항목 추가
            a.insert(b, x): x번 인덱스에 항목 추가
            a.pop([x]): x번 인덱스의 항목 제거(인덱스 생략 시 마지막 항목 제거)
            a.remove(b): b값을 가진 첫 번째 항목 제거
            a.sort(): 리스트 항목 정렬
            a.reverse(): 리스트 항목의 순서를 뒤집음
    
    ○ 딕셔너리(Dictionary): 순서가 있는(Python 3.7+), 키-값 쌍으로 데이터를 저장하는 자료구조. 키는 중복 불가, 값은 중복 가능
        dict1 = {"name": "Lee", "age": 20}
        •주요 메소드
            a.keys(): 딕셔너리의 모든 키를 반환(리스트 형태)
            a.values(): 딕셔너리의 모든 값을 반환(리스트 형태)
            a.items(): 딕셔너리의 키-값 쌍 반환(튜플형태)
            a.get(key,[default]): 키에 해당하는 값을 반환(없으면 기본값 반환)
            a.update(other_dict): 다른 딕셔너리와 병합

    ○ 셋(Set): 순서가 없고 중복을 허용하지 않는 자료구조. 중복 데이터 제거는 자동으로 처리됨
        set1 = {1, 2, 3}
        •주요 메소드
            a.add(b): 항목 추가
            a.remove(b): 특정 항목 제거(항목이 없는 경우 KeyError발생)
            a.discard(b): 특정 항목 제거(항목이 없어도 오류 발생하지 않음)
            a.union(set): 두 셋의 합집합 반환
            a.intersection(set): 두 셋의 교집합 반환
            a.difference(set): 두 셋의 차집합 반환

    ○ 튜플(Tuple): 순서가 있고 변경할 수 없는(Immutable) 자료구조. 중복 데이터 허용
        tuple1 = {1, 2, 3, 2, 1}
        •주요 메소드
            a.count(b): b의 개수 반환
            a.index(b): b의 첫 번째 인덱스 반환

7. 클래스와 함수
    ○ 클래스: 객체를 생성하기 위한 틀(템플릿). 데이터(속성)와 행동(메소드)를 하나로 묶음
        •주요 구성 요소
            ➀ 속성(Attributes): 객체의 데이터 저장. __init__ 메소드에서 self를 사용해 정의
            ➁ 메소드(Methods): 객체가 수행할 동작 정의. 첫 번째 매개변수로 self를 받음
            ➂ 생성자(Constructor): __init__ 메소드로 정의. 객체가 생성될 때 초기화함
            ➃ 소멸자(Destructor): __del__ 메소드로 정의. 객체가 소멸될 때 호출
        •정의
            class Person:
                def __init__(self, name, age): → 생성자
                    self.name = name → 속성 정의
                    self.age = age → 속성 정의
                
                def greet(self): → greet 메소드 정의
                    return f"{self.name}, {self.age}"
        # 객체 생성
            person1 = Person("Lee", 25)
            print(person1.greet()) → Lee, 25
    
    ○ 함수: 특정 작업을 수행하는 코드 블록. 재사용 가능한 형태
        •정의와 호출: def를 사용해 정의
            def add(a, b): → add함수 정의
                return a + b
            
            result = add(3, 5) → add함수 호출
            print(result) → 8
        •함수의 종류
            ➀ 매개변수와 반환값이 있는 함수
                def multiply(x, y):
                    return x * y
                print(multiply(3, 4)) → 12
            ➁ 매개변수는 있고 반환값이 없는 함수
                def greet(name):
                    print(f"Hello, {name}")
                greet("Alice")
            ➂ 매개변수와 반환값이 없는 함수
                def display_message():
                    print("This is a simple message")
                display_message()
            ➃ 기본값 매개변수
                def introduce(name, age=20):
                    print(f"{name}, {age}")
                introduce("Bob")
            ➄ 가변 인자
                def sum_all(*args):
                    return sum(args)
                print(sum_all(1, 2, 3, 4))
    
    ○ 전역변수: 함수 외부에서 정의된 변수. 프로그램 전역에서 접근 가능
        •전역변수와 함수의 상호작용
            ➀ 함수에서 전역변수 읽기
                x = 10
                def read_global():
                    print(x) → 전역변수에 접근
                read_global() → 10
            ➁ 함수에서 전역변수 변경
                x = 10
                def modify_global():
                    global x → 전역변수 x를 가져옴
                    x = 20 → 전역변수 x의 값 변경
                modify_global()
                print(x) → 20
            ➂ 전역변수와 지역변수가 충돌하는 경우: 동일한 이름의 전역변수와 지역변수가 있는 경우, 지역변수가 우선됨
                x = 10
                def func():
                    x = 5 → 지역변수 x
                    print(x) → 지역변수 x를 출력
                func() → 5출력
                print(x) → 10출력